import gradle.plugins.CustomTasksPlugin

/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.4.1/userguide/tutorial_java_projects.html
 */

buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "io.freefair.gradle:lombok-plugin:5.1.1"
    }
}

plugins {
    id 'org.springframework.boot' version '2.3.1.RELEASE'
    id 'io.freefair.lombok' version '5.1.1'
}

Properties projectProperties = new Properties()
projectProperties.load(new FileInputStream(projectDir.absolutePath + File.separator + "project.properties"))
projectProperties.each { prop -> project.ext.set(prop.key, prop.value) }

// Common for all projects
allprojects {
    // Apply the java plugin to add support for Java
    apply plugin: 'java'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'org.springframework.boot'
    apply plugin: "io.freefair.lombok"

    repositories {
        // Use jcenter for resolving dependencies.
        // You can declare any Maven/Ivy/file repository here.
        mavenLocal()
        mavenCentral()
    }
}

// All subprojects (located in src/*)
subprojects {
    group = rootProject.ext.basePackage + ".${rootProject.name}"

    sourceSets {
        main {
            java { srcDirs = ['main/java'] }
            resources { srcDirs = ['main/resources'] }
        }

        test {
            java { srcDirs = ['test/java'] }
            resources { srcDirs = ['test/resources'] }
        }
    }

    dependencies {
        // Use JUnit test framework
        testImplementation 'junit:junit:4.12'

        testImplementation rootProject.sourceSets.main.output

        if (project.name.startsWith("bounded_contexts_") && !project.name.startsWith("bounded_contexts_shared_")) {
            //Configuring hexagonal layers dependencies for each bounded context module except shared
            String[] parts = project.projectDir.absolutePath.replace(File.separator, "/").split("bounded_contexts/")[1].split("/")
            String sharedDependency = ""
            if (parts.length == 3) {
                String sharedModuleName = String.format(":bounded_contexts_%s_shared_%s", parts[0], parts[2])
                String globalSharedBCName = String.format(":bounded_contexts_shared_%s", parts[2])
                sharedDependency = parts[1] == "shared" ? globalSharedBCName : sharedModuleName
            }

            if (project.name.endsWith("_application")) {
                compile project(sharedDependency)
                //Add domain dependency
                compile project(":" + project.name.replace("_application", "_domain"))
            }
            else if (project.name.endsWith("_domain")) {
                compile project(sharedDependency)
            }
            else if (project.name.endsWith("_infrastructure")) {
                compile project(sharedDependency)
                //Add application dependency
                compile project(":" + project.name.replace("_infrastructure", "_application"))
            }

            //Configuring infrastructure dependencies of all modules for each bounded context
            String bcName = projectDir.absolutePath.replace("\\", "/").split("/bounded_contexts/")[1]
            if (!bcName.contains("/")) {
                projectDir.listFiles().collect {moduleFolder ->
                    if (moduleFolder.isFile() || moduleFolder.name == "build")
                        return
                    compile project(String.format(":bounded_contexts_%s_%s_infrastructure", bcName, moduleFolder.name))
                }
            }
        }
    }

    bootJar {
        enabled = false
    }

    jar {
        enabled = true
    }
}

// Main project (located in src/starter)

// Apply the application plugin to add support for building a CLI application.
apply plugin: 'application'

sourceSets {
    main {
        java { srcDirs = ['src/starter/main/java'] }
        resources { srcDirs = ['src/starter/main/resources'] }
    }

    test {
        java { srcDirs = ['src/starter/test/java'] }
        resources { srcDirs = ['src/starter/test/resources'] }
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.reflections:reflections:0.9.11'

    //Add dependencies for all applications to root project
    File applicationsDir = file(String.format("%s%ssrc%sapplications", projectDir.absolutePath, File.separator, File.separator))
    applicationsDir.listFiles().collect {appFolder ->
        if (appFolder.isFile() || appFolder.name == "build")
            return
        compile project(String.format(":applications_%s", appFolder.name))
    }
}

application {
    // Define the main class for the application.
    mainClassName = 'starter.Starter'
}

bootJar {
    archivesBaseName = 'spring-gradle-ddd-skeleton'
    archiveVersion = '0.0.1'
}

//Tasks
apply plugin: CustomTasksPlugin


